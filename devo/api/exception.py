import time
from json import JSONDecodeError

import requests

from devo.sender.messages import ERROR_MSGS


class DevoClientException(Exception):
    """ Default Devo Client Exception for functionalities
     related to querying data to the platform"""

    def __init__(self, message: str):
        """
        Creates an exception related to query data functionality

        :param message: Message describing the exception. It will be
         also used as `args` attribute in `Exception`class
        """
        self.message = message
        """Message describing exception"""
        super().__init__(self.message)


class DevoClientRequestException(DevoClientException):
    """ Devo Client Exception that is raised whenever a query data request
    is performed and processed but an error is found on server side"""

    def __init__(self, response: requests.models.Response):
        """
        Creates an exception related bad request of data queries

        :param response: A `requests.models.Response` model standing
        for the `request` library response for the query data request.
        It will be also used as `args` attribute in `Exception`class
        """
        self.status = response.status_code
        try:
            error_response = response.json()
            self.message = error_response.get("msg",
                                              error_response.get("error", "Error Launching Query"))
            """Message describing exception"""
            if 'code' in error_response:
                self.code = error_response['code']
                """Error code `int` as returned by server"""
            if 'error' in error_response:
                self.cause = error_response.get("error")
                """Cause of error or detailed description as returned by server"""
                if 'code' in error_response['error']:
                    self.code = error_response['error']['code']
                if 'message' in error_response['error']:
                    self.message = error_response['error']['message']
            elif 'object' in error_response:
                self.message = ": ".join(error_response["object"])
            else:
                self.cause = error_response
            if 'cid' in error_response:
                self.cid = error_response['cid']
                """Unique request identifier as assigned by server"""
            self.timestamp = error_response.get('timestamp', time.time_ns() // 1000000)
            """Timestamp of the error if returned by server, autogenerated if not"""
        except JSONDecodeError as exc:
            self.message = ERROR_MSGS["error_no_detail"] % self.status
        super().__init__(self.message)


class DevoClientDataResponseException(DevoClientException):
    """ Devo Client Exception that is raised after a successful streamed request
    whenever an error is found during the processing of an event"""

    def __init__(self, message: str, code: int, cause: str):
        """
        Creates an exception related to wrong processing of an event of a successful request

        :param message: Message describing the exception. It will be
         also used as `args` attribute in `Exception`class
        :param code: Error code `int` as returned by server
        :param cause: Cause of error or detailed description as returned by server
        """
        self.message = message
        """Message describing exception"""
        self.code = code
        """Error code `int` as returned by server"""
        self.cause = cause
        """Cause of error or detailed description as returned by server"""
        super().__init__(self.message)
